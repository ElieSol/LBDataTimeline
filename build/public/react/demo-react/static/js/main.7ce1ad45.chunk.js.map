{"version":3,"sources":["logo.svg","ChartPanel/TimelinePlot.tsx","ChartPanel/ChartPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TimelinePlot","props","containerRef","svgContainer","state","zoomDomain","x","logContainerRef","bind","this","domain","setState","console","log","firstElementChild","divId","element","document","getElementById","count","childElementCount","createContainer","id","ref","container","name","padding","top","left","right","bottom","theme","VictoryTheme","material","width","height","label","tickFormat","style","axis","stroke","grid","axisLabel","color","React","Component","observable","autobind","ChartPanel","ImportDisplay","className","Button","App","toggle","activeTab","tab","src","logo","alt","Nav","tabs","NavItem","NavLink","classnames","active","onClick","to","TabContent","TabPane","tabId","Table","bordered","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ce1ad45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Select from 'react-select';\nimport {createContainer, VictoryLabel, VictoryGroup, VictoryTooltip, VictoryVoronoiContainer, VictoryLegend, VictoryTheme, VictoryScatter, VictoryChart, VictoryLine, VictoryAxis, VictoryBrushContainer} from 'victory';\nimport { observable } from 'mobx';\nimport autobind from 'autobind-decorator';\n\n\nconst SVG_ID = \"plots-tab-plot-svg\";\n\n\nexport type TimelinePlotProps = {\n\n}\n\nexport type TimelinePlotState = {\n    zoomDomain: any;\n}\n\nlet source:any;\n\nexport class TimelinePlot extends React.Component<TimelinePlotProps, TimelinePlotState>{\n    @observable plotExists:boolean = false;\n    containerRef: any;\n\n    public constructor(props: TimelinePlotProps){\n        super(props);\n        \n        this.state = {\n            zoomDomain: { x: [1,5] },\n        }\n\n        this.logContainerRef = this.logContainerRef.bind(this);\n    }\n\n    /*\n        COMPONENT STATE MANAGEMENT\n    */\n\n    componentDidMount() {      \n        this.logContainerRef();\n    }\n\n    componentDidUpdate() {\n        //this.plotExists = !!this.getSvg();\n    }\n\n    // MT TO MANAGE THE ZOOM\n    handleZoom(domain: any) {\n        this.setState({ zoomDomain: domain });\n    }\n\n    /* \n      PART RELATED TO GRAPH EXPORT\n    */\n    private svgContainer!: HTMLDivElement;\n    \n\n    logContainerRef() {\n        console.log(this.containerRef);\n    };\n\n   /* MT TO GET/EXPORT A DOM ELT INTO AN SVG ELT\n     ___________________________________________\n     Return: SVG ELT\n   */\n    @autobind\n    private getSvg() {\n        return this.containerRef.firstElementChild as SVGElement;\n    }\n\n\n   private checkDivChildComponents(divId:any){\n     var element = document.getElementById(divId);\n     if(element!== null){\n       var count = element.childElementCount;\n       if(count===1){\n         return false;\n       }\n       if(count>1){\n         return true;\n       }\n     }\n     return false;\n   } \n\n    render () {\n        const VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n        let maxValue = 365\n\n        return (\n            <div  id=\"timeline\" ref = {(container) => {this.svgContainer = container!}}>\n                <VictoryChart\n                    name=\"FragmentLengthChart\"\n                    padding={{ top: 15, left: 40, right: 60, bottom: 25 }}\n                    theme={VictoryTheme.material}\n                    width={400}\n                    height={200}\n                >\n                    \n                </VictoryChart>\n\n\n                {/*\n              SCROLLBAR GRAPH\n                    */}\n                <VictoryChart\n                    name=\"ScrollBar\"\n                    padding={{ top: 10, left: 40, right: 60, bottom: 35 }}\n                    width={400} \n                    height={50}\n                >\n                    <VictoryAxis\n                        label=\"Timeline\"\n                        tickFormat = {()=>``}\n                        style={{\n                            axis: {stroke: \"grey\"},\n                            grid: {stroke: \"grey\"},\n                            axisLabel: {color:\"grey\" }\n                            }}\n                    />\n\n                </VictoryChart>\n                 \n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Select from 'react-select';\n\nimport {Row, Col} from 'react-bootstrap';\nimport {SliderPicker} from 'react-color';\nimport {TimelinePlot} from './TimelinePlot';\n\n\nexport type ChartPanelProps = {\n\n}\n\nexport type ChartPanelState = {\n\n}\n\n\nexport class ChartPanel extends React.Component<ChartPanelProps, ChartPanelState>{\n\n    public constructor(props: ChartPanelProps){\n        super(props);\n    }\n\n    render () {\n        return (\n            <div>\n                <TimelinePlot/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport { Route, BrowserRouter as Router, Link } from 'react-router-dom';\n\nimport { Table, TabContent, TabPane, Nav, NavItem, NavLink, Card, Button, CardTitle, CardText, Row, Col } from 'reactstrap';\nimport {ChartPanel} from './ChartPanel/ChartPanel';\nimport classnames from 'classnames';\n\nclass ImportDisplay extends React.Component{\n  render(){\n    return (\n    <div className=\"Background-Display\">\n          <Button color=\"primary\" className=\"button\" >Load Sample Data</Button>\n          <Button color=\"primary\" className=\"button\" >Import Local Data</Button>\n          <Button color=\"primary\" className=\"button\">Import Data from cBioportal</Button>\n    </div>\n    )\n  }\n}\n\nexport type AppState = {\n  activeTab : any;\n}\n\n\nexport type AppProps = {\n}\n\n\nclass App extends React.Component<AppProps,AppState>{\n  constructor(props:AppProps){\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n\n    this.state = {\n      activeTab: '1'\n    };\n\n  }\n\n\n  toggle(tab:any){\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      })\n    }\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Timeline View\n          </p>\n        </header>\n        <Nav tabs>\n          <NavItem>\n            <NavLink className={classnames({active: this.state.activeTab ==='1'})} onClick={()=>{this.toggle('1')}}   to=\"/\">\n              Import\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classnames({active: this.state.activeTab ==='2'})} onClick={()=>{this.toggle('2')}}  >\n             Information\n            </NavLink>\n          </NavItem>\n          <NavItem>\n           <NavLink className={classnames({active: this.state.activeTab ==='3'})} onClick={()=>{this.toggle('3')}}   to=\"/ChartDisplay\">\n              Chart Display\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classnames({active: this.state.activeTab ==='4'})} onClick={()=>{this.toggle('4')}}>\n             Help\n            </NavLink>\n          </NavItem>\n        </Nav>\n\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"2\">\n            <Table bordered>\n              <thead>\n                <tr>\n                  <th>GENE ID</th>\n                  <th>MUTATION</th>\n                  <th>POSITION</th>\n                  <th>COVERAGE</th>\n                  <th>VAF</th>\n                </tr>\n              </thead>\n              <tbody>\n\n              </tbody>\n            </Table>\n          </TabPane>\n        </TabContent>\n\n\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"3\">\n            <ChartPanel/>\n          </TabPane>  \n        </TabContent>\n\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n            <ImportDisplay/>\n          </TabPane>  \n        </TabContent>\n\n        \n\n        <footer className=\"App-footer\">\n         <p>Application powered by <code>React</code></p>\n        </footer>\n      </div>\n    );\n\n    async function callExpress() {\n      try {\n        let response = await fetch('/api/say-hello/SeanMaxwell')\n                              .then(res => res.json());\n        alert('Hi this is a response from the backend: ' + response.response);\n      } catch (err) {\n        alert(err);\n      }\n    }\n\n    callExpress();\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}